properties([
parameters([
    [$class: 'ChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        description: 'Select Container registry',
        filterLength: 1,
        filterable: false,
        name: 'ACR_ENV',
        randomName: 'choice-parameter-5631314439613978',
        script: [
            $class: 'GroovyScript',
            fallbackScript: [ classpath: [], sandbox: true, script: 'return["Commercial"]' ],
            script: [ classpath: [], sandbox: true, script: 'return["Commercial","Gov"]' ]
        ]
    ],
    [$class: 'CascadeChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        description: 'Select Namespace',
        filterLength: 1,
        filterable: false,
        name: 'NAMESPACE',
        randomName: 'choice-parameter-5631314456178619',
        referencedParameters: 'ACR_ENV',
        script: [
            $class: 'GroovyScript',
            fallbackScript: [ classpath: [], sandbox: true, script: 'return["eis"]' ],
            script: [ classpath: [], sandbox: true,
                script:
                    ''' if (ACR_ENV.equals("Commercial")){
                            return["eis","billing","prodsupport","feature"]
                        }
                        else if(ACR_ENV.equals("Gov")){
                            return["eis"]
                        }
                    '''
            ]
        ]
    ]
])
])

try {
  library(
    identifier: 'jsl-jenkins-shared-library-local@release/20211111',
    retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
      extensions: [[$class: 'WipeWorkspace']]
     ]
    )
  ) _
} catch (Exception Ex) {
  library(
    identifier: 'jsl-jenkins-shared-library@release/20211111',
    retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: "git@github.com:CenturyLink/jsl-jenkins-shared-library.git",
      credentialsId: 'FedAutoBot-SSH',
      extensions: [[$class: 'WipeWorkspace']]
    ]
   )
  ) _
}

pipeline {
    agent {
      label 'Docker-enabled'
    }

    options {
      buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10'))
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }

    environment {
        /*
          Credentials:
          GITHUB_TOKEN_CREDENTIALS - github token, jenkins user password credential
          GITHUB_SSH_CREDENTIALS - github ssh private key, jenkins private key credential.
          SONARQUBE_CREDENTIALS - Sonarqube access info, jenkins secret text credential
          JIRA_CREDENTIALS - Jira access info, jenkins secret file credential with environment variables to export
          MSTEAMS_CREADENTIALS - MS Teams channel webhook URL, jenkins secret text credential
        */

        GITHUB_TOKEN_CREDENTIALS = 'FedAutoBot-Token'
        GITHUB_SSH_CREDENTIALS = 'FedAutoBot-SSH'
        DOCKER_CREDENTIALS = 'nexus-secret'
        QUALITY_GATE_CREDENTIALS = 'qualitygate-secret'
        SONARQUBE_CREDENTIALS = 'sonar-secrets'
        JIRA_CREDENTIALS = 'jira-credentials'
        PROJECT_MAL = 'EIS-FEDERAL-PORTAL'
        MSTEAMS_CREDENTIALS = 'EIS_TEAMS_URL'

        // Custom project variables
        BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
        COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
        PULL_REQUEST="pr-${env.CHANGE_ID}"
        PROJECT_NAME = 'eis-sla-service'

        DOCKERFILE_PATH = './dockerfiles/DockerfileAzure'
        // ACR parameters
        ACR_CREDENTIALS = 'eis-dev-acr'
        ACR_REGISTRY = 'eisimages.azurecr.io'
        ACR_CREDENTIALS_PROD = 'eis-ato-acr'
        ACR_REGISTRY_PROD = 'eisimages.azurecr.us'
        ACR_REPO = "eis"

    }

    stages {
        stage('Static Code Analysis') {
          parallel {
            stage('Linting') {
              agent {
                dockerfile {
                  filename 'Dockerfile'
                  dir 'cicd/docker/mvn'
                  label 'Docker-enabled'
                }
              }
              steps {
                script {
                  /* Contract validation gate */
                  echo 'Linting Placeholder'
                  jslMavenWrapper('-f ./pom.xml checkstyle:checkstyle')
                  archiveArtifacts artifacts: 'target/checkstyle*.xml', fingerprint: true
                }
              }
            }

            stage('DevSecOps'){
              steps {
                script {
                  /* Contract validation gate */
                  jslGitHubSecurityAlert()
                }
              }
            }
          }
        }

        stage('Build files') {
          agent {
            dockerfile {
              filename 'Dockerfile'
              dir 'cicd/docker/mvn'
              label 'Docker-enabled'
            }
          }
          steps {
            jslMavenWrapper('-f ./pom.xml clean install')
              script {
                sh 'cp src/main/resources/application*.yaml env_config/'
                sh 'rm -rf env_config/application-prod.yaml'
                env.JAR_FILE = 'target/*.jar'
                stash name: "TARGET", includes: "target/**"
                stash name: "DEPLOY_SCRIPTS", includes: "deploy_scripts/**"
                stash name: "ENV_CONFIG", includes: "env_config/**"
              }
            }
        }

        stage('VersionUpdate') {
          agent {
            docker {
              image 'nexusprod.corp.intranet:4567/eis/azcli:latest'
              label 'Docker-enabled'
            }
          }
          steps {
            script {
              REGISTRY='eisimages'
              if (("${params.ACR_ENV}" ==~ /(Gov)/) && ("${params.NAMESPACE}" ==~ /(eis)/)) {
                env.AZ_SVC_PRINCIPAL='azure-service-principal-cert'
                AZ_CLOUD='AzureUSGovernment'
              }
              else {
                env.AZ_SVC_PRINCIPAL='azure-service-principal-dev'
                AZ_CLOUD='AzureCloud'
              }
              withCredentials([azureServicePrincipal("${env.AZ_SVC_PRINCIPAL}")]) {
                sh "az cloud set --name ${AZ_CLOUD}"
                sh "az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} -t ${AZURE_TENANT_ID}"
                sh "az account set -s ${AZURE_SUBSCRIPTION_ID}"
                sh "az acr login --name ${REGISTRY} --expose-token"

                if ("${params.NAMESPACE}" ==~ /(eis)/) {
                  sh "az acr repository show-tags --name ${REGISTRY} --repository ${env.ACR_REPO}/${env.PROJECT_NAME} --output table | grep -v \"billing\\|e2e\" | awk -F\"-\" '{print \$1}'| sort -t \".\" -k1,1n -k2,2n -k3,3n | tail -1 > version.txt"
                } else {
                  sh "az acr repository show-tags --name ${REGISTRY} --repository ${env.ACR_REPO}/${env.PROJECT_NAME} --output table | grep ${params.NAMESPACE} | awk -F\"-\" '{print \$2}'| sort -t \".\" -k1,1n -k2,2n -k3,3n | tail -1 > version.txt"
                }
                CUR_VER = readFile 'version.txt';

                if ("${CUR_VER}" != "") {
                  println("Current Version :: ${CUR_VER}")
                  def script_output = sh(returnStdout: true, script: """
                    #!/bin/sh
                    semverVersion=\$(awk -F\"-\" '{print \$1}' version.txt)
                    major=\$(echo \$semverVersion | awk -F\".\" '{print \$1}')
                    minor=\$(echo \$semverVersion | awk -F\".\" '{print \$2}')
                    patch=\$(echo \$semverVersion | awk -F\".\" '{print \$3}')
                    if [[ \$patch -ge 99 ]]; then
                      if [[ \$minor -ge 99 ]]; then
                        major=\$((\$major+1)); minor="0"; patch="0"
                      else
                        minor=\$((\$minor+1)); patch="0"
                      fi
                    else
                      patch=\$((\$patch+1))
                    fi
                  incremented_version="\$major.\$minor.\$patch"
                  echo \$incremented_version
                  """)
                  env.VERSION = script_output.trim()
                  IMAGE_TAG = env.VERSION + "-${COMMIT_ID}"
                } else {
                  IMAGE_TAG="1.0.0" + "-${COMMIT_ID}"
                  println("Current Version :: None")
                }
                println("Next Version :: ${IMAGE_TAG}")
              }
              if (("${params.ACR_ENV}" ==~ /(Commercial)/) && ("${params.NAMESPACE}" != "eis")) {
                env.IMAGE_TAG="${params.NAMESPACE}-${IMAGE_TAG}"
              } else {
                env.IMAGE_TAG="${IMAGE_TAG}"
              }
            }
          }
        }

        stage('Docker') {
          steps {
            script {
              unstash name: "TARGET"
              def dockerfile_path = "${env.DOCKERFILE_PATH}"

              if ("${params.ACR_ENV}" ==~ /(Gov)/) {
                withCredentials([usernamePassword(credentialsId: "${env.ACR_CREDENTIALS_PROD}", usernameVariable: 'ACRUSER', passwordVariable: 'ACRPASS')]) {
                  sh "docker login -u $ACRUSER -p $ACRPASS ${env.ACR_REGISTRY_PROD}"
                  sh "docker build -t ${env.ACR_REGISTRY_PROD}/${env.ACR_REPO}/${env.PROJECT_NAME}:${env.IMAGE_TAG} -f ${DOCKERFILE_PATH} ."
                  sh "docker push ${env.ACR_REGISTRY_PROD}/${env.ACR_REPO}/${env.PROJECT_NAME}:${env.IMAGE_TAG}"
                }
              } else {
                withCredentials([usernamePassword(credentialsId: "${env.ACR_CREDENTIALS}", usernameVariable: 'ACRUSER', passwordVariable: 'ACRPASS')]) {
                  sh "docker login -u $ACRUSER -p $ACRPASS ${env.ACR_REGISTRY}"
                  sh "docker build -t ${env.ACR_REGISTRY}/${env.ACR_REPO}/${env.PROJECT_NAME}:${env.IMAGE_TAG} -f ${DOCKERFILE_PATH} ."
                  sh "docker push ${env.ACR_REGISTRY}/${env.ACR_REPO}/${env.PROJECT_NAME}:${env.IMAGE_TAG}"
                }
              }
            }
          }
        }

        stage('Test') {
          stages {
            stage('Unit Tests') {
              agent {
                dockerfile {
                  filename 'Dockerfile'
                  dir 'cicd/docker/mvn'
                  label 'Docker-enabled'
                }
              }
              steps {
                script {
                  /* Contract validation gate */
                  jslMavenWrapper('-f ./pom.xml clean test')
                  jslPublishTestResults('target/surefire-reports/*.xml')
                  stash name: "TESTS", includes: "target/surefire-reports/*.xml"
                }
              }
            }

            stage('Coverage'){
              steps {
                script {
                  /* Contract validation gate */
                  unstash name: "TARGET"
                  jslPublishHTMLTestResults('index.html','target/site/jacoco/', 'Jacoco Report')
                  /* Sonar get executed only in Master Branch */
                  jslQualityGateCodeCoverage('./cicd/conf/sonarqube/sonar-project.properties')
                }
              }
            }

            stage('Sonarqube'){
              agent {
                dockerfile {
                  filename 'Dockerfile'
                  dir 'cicd/docker/sonarqube'
                  label 'Docker-enabled'
                }
              }
              steps {
                script {
                  unstash name: "TARGET"
                  /* Contract validation gate */
                  jslSonarQubeStaticAnalysis('./cicd/conf/sonarqube/sonar-project.properties')
                }
              }
            }

            stage('Quality Gate'){
              agent {
                dockerfile {
                  filename 'Dockerfile'
                  dir 'cicd/docker/sonarqube'
                  label 'Docker-enabled'
                }
              }
              steps {
                script {
                  /* Contract validation gate */
                  jslQualityGate()
                }
              }
            }
          }
        }

      stage('Adoption Stats') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/jira'
            label 'Docker-enabled'
          }
        }
        steps {
          unstash name: "TESTS"
          /* Contract validation gate */
          jslAdoptionMain('target/surefire-reports/*.xml')
        }
      }
    }

    post {
      success {
        script {
          if (env.BRANCH_NAME ==~ /(master|main)/) {
            jslNotification('success')
          }
        }
        cleanWs()
      }
      failure {
        script {
          if (env.BRANCH_NAME ==~ /(master|main)/) {
            jslNotification('failure')
          }
        }
        cleanWs()
      }
      unstable {
        script {
          if (env.BRANCH_NAME ==~ /(master|main)/) {
            jslNotification('unstable')
          }
        }
        cleanWs()
      }
    }
}
