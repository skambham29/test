/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library

  This section always runs in the master jenkins.
*/

try {
library(
      identifier: 'jsl-jenkins-shared-library-local@stable',
      retriever: modernSCM(
        [
          $class: 'GitSCMSource',
          remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
          extensions: [[$class: 'WipeWorkspace']]
        ]
      )
    ) _
} catch (Exception Ex) {
library(
  identifier: 'jsl-jenkins-shared-library@stable',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: "https://github.com/CenturyLink/jsl-jenkins-shared-library.git",
      credentialsId: 'GITHUB_APP_CREDENTIALS',
      extensions: [[$class: 'WipeWorkspace']]
    ]
  )
) _
}

pipeline {

    environment {

      //  Credentials:
      //  GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential. SCMAUTO_GITHUB contains the GitHub token from SCMAuto user, which need to have access to the repository.
      //  GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential. SCMAUTO_SSH_DEVOPS_PIPELINE contains the SSH key from SCMAuto user, which need to have access to the repository.   
      //  SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
      //  JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export     
      //  MSTEAMS_CREDENTIALS MS Teams access info, jenkins secret text
      //  QUALITY_GATE_CREDENTIALS Credentials to gather all the contract validation gates expected to be crossed.
      // PROJECT_MAL The MAL of the project
      // AUTHORIZED_USERS - List of CUIDs who will deploy to production environment, seperated by comma(,) & space, jenkins secret text credential
      // DEPLOY_AUTH_TOKEN - Production deployment password, which will be asked at the time if production deployment, jenkins secret text credential

      GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      //SONARQUBE_CREDENTIALS = 'sonar-credentials'
	  SONARQUBE_CREDENTIALS = 'sonartokenprod'
      JIRA_CREDENTIALS = 'jira-credentials'
      AUTHORIZED_USERS = ''
      DEPLOY_AUTH_TOKEN = ''

      // Custom project variables
      PROJECT_NAME = 'cache-services'
      PROJECT_MAL = "LASER"
    
      // Custom project variables
      BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"

    }


    // https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    //Add agent sections in stages/stage if needed.

    agent {
      label 'Docker-enabled'
    }

    options {

      // https://www.jenkins.io/doc/book/pipeline/syntax/#options

      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }


    // https://www.jenkins.io/doc/book/pipeline/syntax/#triggers

    triggers {
      issueCommentTrigger('.*test this please.*')
    }

    stages {
      stage('Summary') {
        steps {
          script {
            sh script: """
                echo "PROJECT_NAME: ${PROJECT_NAME}"
                echo "GIT_BRANCH: ${GIT_BRANCH}"
                echo "GIT_COMMIT: ${GIT_COMMIT}"
                echo "BRANCH_NAME: ${BRANCH_NAME}"
                echo "COMMIT_ID: ${COMMIT_ID}"
                echo "PULL_REQUEST: ${PULL_REQUEST}"
                echo "CHANGE_ID: ${env.CHANGE_ID}"
            """, label: "Details summary"
          }
        }
      }
      stage('Static Code Analysis') {
        parallel {
          stage('Linting') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/mvn'
                label 'Docker-enabled'
                args '--shm-size=2gb'
              }
            }
            steps {
              script{
                jslMavenWrapper('checkstyle:checkstyle || true')
              }
            }
          }
          stage('DevSecOps') {
            steps {
              script {
                jslGitHubSecurityAlert()
              }
            }
          }
        }
      }
      stage ('Build') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/mvn'
            label 'Docker-enabled'
            args '--shm-size=2gb'
          }
        }
        steps {
          withMaven {
             script{
                jslMavenWrapper('-U clean deploy')
				stash name: "cache-services", includes: "**/target/*"
             }           
          }
        }
      }
	      stage('Test') {
      stages {
        stage('Unit Tests') {
            steps {
              script {
                /* Contract validation gate */
                sh 'mkdir -p target/surefire-reports'
                sh """
                echo '<testsuite xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" time="0.133" tests="0" errors="0" skipped="0" failures="0"></testsuite>' > target/surefire-reports/surefire-report.xml
                """
                jslPublishTestResults('target/surefire-reports/surefire-report.xml')
                stash name: "TESTS", includes: "target/**"
              }
            }
          }
          stage('Coverage'){
            steps {
              script {
                  unstash name: "TESTS"
                  jslQualityGateCodeCoverage('./cicd/conf/sonarqube/sonar-project.properties')
                }
              }
            }
            stage('Sonarqube'){
            agent {
              docker {
                image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/sonarqube_agent:latest'
                label 'Docker-enabled'
              }
            }
                steps {
                  script {
                    unstash name: "TARGET"
					unstash name: "TESTS"
                   /* Contract validation gate */
                   jslSonarQubeStaticAnalysis('./cicd/conf/sonarqube/sonar-project.properties')
                 }
               }
             }
             stage('Quality Gate'){
				agent {
				  docker {
					image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/sonarqube_agent:latest'
					label 'Docker-enabled'
				  }
				}
               steps {
                 script {
                   /* Contract validation gate */
                   jslQualityGate()
                 }
               }
             }
           }
         }
	  stage('Adoption Stats') {
      		agent {
		      docker {
		      image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/jira_agent:latest'
		      label 'Docker-enabled'
		     }
        	}
      		steps {
        		script {
		
			    unstash name: "TESTS"
                jslAdoptionMain('hook_*.xml')        		
				  
      		}
    	}
    }
}
