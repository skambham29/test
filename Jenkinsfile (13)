/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library

  This section always runs in the master jenkins.
*/
try {
library(
      identifier: 'jsl-jenkins-shared-library-local@stable',
      retriever: modernSCM(
        [
          $class: 'GitSCMSource',
          remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
          extensions: [[$class: 'WipeWorkspace']]
        ]
      )
    ) _
} catch (Exception Ex) {
library(
  identifier: 'jsl-jenkins-shared-library-local@stable',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: "https://github.com/CenturyLink/jsl-jenkins-shared-library.git",
      credentialsId: 'GITHUB_APP_CREDENTIALS',
      extensions: [[$class: 'WipeWorkspace']]
    ]
  )
) _
}

pipeline {
    environment {
      /*
        Credentials:
        GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential
        GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential.
        DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export
        KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
        KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
        AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
        SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
        GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
        JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
        MORPHEUS_CREDENTIALS Morpheus access info, jenkins secret text
        MSTEAMS_CREADENTIALS MS Teams access info, jenkins secret text
        QUALITY_GATE_CREDENTIALS Credentials to gather
        PROJECT_MAL The MAL of the project
      */
      GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      DOCKER_CREDENTIALS = 'nexus-secrets-file'
      KUBE_CREDENTIALS = 'dev-kube-creds'
      KUBE_CREDENTIALS_TEST = "${env.BRANCH_NAME ==~ /(test[1-4])/ ? 'test-kube-creds' : 'dev-kube-creds'}"
      KUBE_CREDENTIALS_PROD = 'prod-kube-creds'
      AMAZON_CREDENTIALS = ''
      SONARQUBE_CREDENTIALS = 'sonarcicdent'
      GCP_CREDENTIALS = ''
      JIRA_CREDENTIALS = 'jira-credentials'
      MORPHEUS_CREDENTIALS = ''
      MSTEAMS_CREDENTIALS = 'teams-secret'
      QUALITY_GATE_CREDENTIALS = 'qg-creds'
      PROJECT_MAL = "BPM-SERVICES-2"

      //Deployment control credentialsId
      AUTHORIZED_USERS = 'authorized_users'
      DEPLOY_AUTH_TOKEN = 'deploy_auth_token'

      //Deployable branches
      DEPLOYABLE = "${env.BRANCH_NAME==~ /(test[1-4])/ || env.BRANCH_NAME==~ /(development)/ || env.BRANCH_NAME ==~ /(production)/ ? 'true' : 'false'}"

      // Custom project variables
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      PROJECT_NAME = "${env.JOB_NAME}".split('/')[2].toLowerCase()
      JOB_DIR  = "${env.JOB_NAME}".split('/')[1].toLowerCase()

      //For destination images
      DOCKER_REPO ="bpm-service-2/${env.JOB_DIR}"
      IMAGE_NAME = "${env.PROJECT_NAME}"
      IMAGE_TAG =  "${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
      KUBE_DOCKER_SECRET_NAME_PROD = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"

      //AppDynamics variables
      //following env variable is injected through Jenkins Groovy config file.
      //env.APPDYNAMICS_AGENT_APPLICATION_NAME="BPM-SERVICES-2 (Dev) Common Reference Data BPM Service-2 - SYSGEN787796949"
      APPDYNAMICS_AGENT_TIER_NAME="${env.PROJECT_NAME}"
    }
    parameters {
      //https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
      text(name: 'GCR', defaultValue: '', description: 'Enter the GCR description. Only used in deployment to production stage.')
      text(name: 'VERSION', defaultValue: '', description: 'Version to deploy. Only used in deployment to production stage.')
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    Add agent sections in stages/stage if needed.
    */
    agent {
      label 'Docker-enabled'
    }

    options {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#options
      */
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    */
    triggers {
      issueCommentTrigger('.*test this please.*')
    }

   stages {
     stage('Authorize - Prod only') {
        when {
          expression { BRANCH_NAME ==~ /(production)/ }
        }
        steps {
          script {
            jslDeploymentControlKnob()
//             if ( params.VERSION == '') {
//              jslSkipProdValidation()
//             }
          }
        }
      }

      stage('Static Code Analysis') {
        when {
          anyOf {
            expression { !(BRANCH_NAME ==~ /(production)/) }
            not {
              expression {
                def doTest = false
                if ( params.VERSION == '' && BRANCH_NAME ==~ /(production)/ ) {
                  doTest = jslReadSkipProdValidation()
                }
                return doTest
              }
            }
          }
        }
        parallel {
          stage('DevSecOps'){
            steps {
              script {
                /* Contract validation gate */
                jslGitHubSecurityAlert()
              }
            }
          }
        }
      }

      stage('Build') {
        when {
          anyOf{
            expression { !(BRANCH_NAME ==~ /(production)/ ) }
            expression { return params.VERSION == '' && BRANCH_NAME ==~ /(production)/ }
          }
        }
        agent {
            /*dockerfile {
                filename 'Dockerfile'
                dir "cicd/docker/mvn"
                label 'Docker-enabled'
            }*/
            docker {
                image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/jdk1_11_agent:latest'
                label 'Docker-enabled'
                registryUrl 'https://nexusprod.corp.intranet:4567'
                registryCredentialsId 'nexus-cicd-creds'
            }
        }
        steps {
          script {
            env.pomVersion =  jslMvnProjectVersion()
            jslMavenWrapper("-f ./pom.xml clean install spring-boot:repackage")
            stash name: "TARGET", includes: "target/**"
          }

        }
      }

      stage('Create Images') {
        when {
          expression { DEPLOYABLE=='true' || BRANCH_NAME == "PR-${env.CHANGE_ID}" }
          anyOf {
            expression { !(BRANCH_NAME ==~ /(production)/) }
            expression { return params.VERSION == '' && BRANCH_NAME ==~ /(production)/ }
          }
        }
        steps {
          script {
            unstash name: "TARGET"
            def dockerfile_path = "./Dockerfile"
            def buildArgs = "--build-arg BRANCH_NAME=${env.BRANCH_NAME}"
            echo "Creating image with ${env.BRANCH_NAME} profile"
            jslBuildAndPushToNexus(dockerfile_path, env.DOCKER_REPO, env.IMAGE_NAME, env.IMAGE_TAG, buildArgs)
            jslCleanPath(dockerfile_path)
          }
        }
      }

      stage('Test') {
        when {
          expression { DEPLOYABLE=='true' || BRANCH_NAME == "PR-${env.CHANGE_ID}" }
          anyOf {
            expression { !(BRANCH_NAME ==~ /(production)/) }
            not {
              expression {
                def doTest = false
                if ( params.VERSION == '' && BRANCH_NAME ==~ /(production)/ ) {
                  doTest = jslReadSkipProdValidation()
                }
                return doTest
              }
            }
          }
        }
        stages {
          stage('Unit Tests') {
            agent {
                /*dockerfile {
                    filename 'Dockerfile'
                    dir "cicd/docker/mvn"
                    label 'Docker-enabled'
                }*/
                docker {
                	image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/jdk1_11_agent:latest'
                	label 'Docker-enabled'
                 registryUrl 'https://nexusprod.corp.intranet:4567'
                 registryCredentialsId 'nexus-cicd-creds'
            	}
            }
            steps {
              script {
                jslMavenWrapper("-f ./pom.xml clean test -Punit-tests")
                /* Contract validation gate */
                jslPublishTestResults("target/surefire-reports/*.xml")
                stash name: "TESTS", includes: "target/surefire-reports/*.xml"
                stash name: "COVERAGE", includes: "target/jacoco-ut/**"
              }
            }
          }
          stage('Coverage'){
            steps {
              script {
                /* Contract validation gate */
                jslQualityGateCodeCoverage("./cicd/conf/sonarqube/sonar-project.properties")
                echo "coverage"
              }
            }
          }
          stage('Sonarqube'){
            agent {
                //dockerfile {
                docker{
                    image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/sonarqube_agent:latest'
                    label 'Docker-enabled'
                    registryUrl 'https://nexusprod.corp.intranet:4567'
                    registryCredentialsId 'nexus-cicd-creds'
                }
            }
            steps {
              script {
                unstash name: "TARGET"
                unstash name: "COVERAGE"
                unstash name: "TESTS"
                /* Contract validation gate */
                jslSonarQubeStaticAnalysis("./cicd/conf/sonarqube/sonar-project.properties")
              }
            }
          }
          stage('Quality Gate'){
            agent {
                docker{
                    image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/sonarqube_agent:latest'
                    label 'Docker-enabled'
                    registryUrl 'https://nexusprod.corp.intranet:4567'
                    registryCredentialsId 'nexus-cicd-creds'
                }
            }
            steps {
              script {
                /* Contract validation gate */
                jslQualityGate()
              }
            }
          }
        }
      }

      stage('Deploy') {
        when {
          expression { DEPLOYABLE=='true' }
          anyOf {
            expression { !(BRANCH_NAME ==~ /(production)/) }
            expression { return params.VERSION == '' && BRANCH_NAME ==~ /(production)/ }
          }
        }
        steps {
          configFileProvider([configFile(fileId: "${BRANCH_NAME}.env", targetLocation: 'env.groovy', variable: 'ENV_CONFIG')]) {
            load "env.groovy";
          }
          script {
            env.CLOUD_ENVIRONMENT = jslGetLifecycleEnvironment()
            if (env.CHANGE_ID == null) {
              jslGitHubDeploymentCreate(env.GIT_BRANCH, env.CLOUD_ENVIRONMENT)
            }
            try {
              if (env.CHANGE_ID == null) {
                jslGitHubDeploymentSetStatus(env.GIT_BRANCH,'in_progress', null, env.GITHUB_TOKEN_CREDENTIALS, env.CLOUD_ENVIRONMENT)
              }
              def my_manifest = './sample_manifest.yml'
              jslGenerateManifestFromTemplate('cicd/k8s/ingress.tmpl cicd/k8s/service.tmpl cicd/k8s/deployment.tmpl', my_manifest, env.PROJECT_ACRONYM)
              jslDeployK8sManifest(my_manifest, env.PROJECT_ACRONYM)
              stash name: "INGRESS", includes: "ingress_info.txt"
              jslCleanPath(my_manifest)
              /*Single endpoint.*/
              def endpoint = sh(script: "cat ingress_info.txt", returnStdout: true).trim()
              jslGitHubMessage("The endpoint is available at: ${endpoint}")
              if (env.CHANGE_ID == null) {
                jslGitHubDeploymentSetStatus(env.GIT_BRANCH,'success', endpoint, env.GITHUB_TOKEN_CREDENTIALS, env.CLOUD_ENVIRONMENT)
              }
            } catch (Exception e) {
              if (env.CHANGE_ID == null) {
                jslGitHubDeploymentSetStatus(env.GIT_BRANCH,'failure', null, env.GITHUB_TOKEN_CREDENTIALS, env.CLOUD_ENVIRONMENT)
              }
              error ('Deployment failed with error: ' + e)
            }
          }
        }
      }

      stage('E2E Testing') {
        when {
          expression { DEPLOYABLE=='true' }
        }
        agent {
            docker {
                	image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/jdk1_11_agent:latest'
                	label 'Docker-enabled'
                	registryUrl 'https://nexusprod.corp.intranet:4567'
                 registryCredentialsId 'nexus-cicd-creds'
            }
        }
        steps {
          script {
            unstash name: "INGRESS"
            def endpoint = sh(script: "cat ingress_info.txt", returnStdout: true).trim()
            jslMavenWrapper("-f ./pom.xml clean test -Pe2e-tests -DmyEndPoint=${endpoint}")
            /* Contract validation gate */
            jslPublishTestResults("target/surefire-reports/*.xml")
            stash name: "E2E-TESTS", includes: "target/surefire-reports/*.xml"
          }
        }
      }

     stage('Adoption Stats') {
        agent {
          docker{
                image 'nexusprod.corp.intranet:4567/jsl-docker-standard-images/jira_agent:latest'
                label 'Docker-enabled'
                registryUrl 'https://nexusprod.corp.intranet:4567'
                registryCredentialsId 'nexus-cicd-creds'
            }
       }
       steps {
         script{
           unstash name: "TESTS"
           jslAdoptionMain("target/surefire-reports/*.xml")
        }
      }
    }
  }

  post {

//     https://www.jenkins.io/doc/book/pipeline/syntax/#post

//     Always post somewhere the watermark:
//   - md5sum of Jenkinsfile
//   - Output of the Jenkinsfile checker output

    success {
      jslNotification('success')
    }
    failure {
      jslNotification('failure')
    }
    unstable {
      jslNotification('unstable')
    }
  }
}